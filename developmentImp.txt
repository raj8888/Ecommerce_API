Development Implementation Log
=============================

1. Database Selection:
   - Chose MongoDB as the database for its flexibility and scalability.
   - Opted for Mongoose as the ODM (Object-Data Mapping) library to simplify data access and validation.

2. User Authentication:
   - Implemented JWT-based authentication for user login and registration.
   - Stored user information in the 'users' collection in MongoDB with a hashed password.
   - Set the default user role to 'user' but added support for 'admin' role for future scalability.

3. Error Handling:
   - Implemented centralized error handling middleware to send meaningful error responses to clients.
   - Created custom error classes to distinguish between different types of errors (e.g., validation errors, not found errors).

4. User Registration:
   - Validated user input during registration to ensure email and mobile uniqueness.
   - Hashed the password using bcrypt before saving it to the database.
   - Responded with appropriate error messages for duplicate email or mobile.

5. User Login:
   - Implemented login functionality with JWT token generation upon successful authentication.
   - Responded with a JWT token for subsequent authenticated API requests.
   - Added security considerations for token-based authentication.

6. User Role Management (Future Enhancement):
   - Included support for 'admin' role to allow for role-based access control in the future.
   - Currently, the default role is set to 'user' for all new registrations.

7. Rate Limiting (Future Enhancement):
   - Rate limiting feature will be added to prevent potential API abuse and maintain server stability. The exact rate limit (e.g., 200 or 300 requests per hour) will be decided based on server capacity and security needs.

8. Category Management:
   - Implemented CRUD operations for managing categories.
   - Created the `category.model.js` file for defining the Mongoose schema for categories.
   - Developed the `category.controller.js` file to handle category-related logic.
   - Configured the `category.route.js` file to define routes for category management.

9. Authentication and Authorization:
   - Developed `authentication.middleware.js` for user authentication using JWT tokens.
   - Created `authorization.middleware.js` for authorization based on user roles.
   - Integrated authentication middleware into protected routes, such as category creation, to ensure that only authenticated users with the 'admin' role can access them.

10.Product Management:
   - Created the `product.model.js` file to define the Mongoose schema for products.
   - Implemented CRUD operations for products in the `product.controller.js` file.
   - Configured the `product.routes.js` file to define routes for product management.

11. Product Creation:
   - Restricted product creation to admin users only.
   - Added authentication middleware to ensure only authenticated users can create products.
   - Implemented the `/api/product/create` route for creating new products.
   - Checked for admin role in the authentication middleware before allowing product creation.
   - Verified the existence of the category ID during product creation and sent appropriate responses if the category ID was invalid or not found.

12.  Product Retrieval:
   - Implemented the `/api/product/all` route to retrieve all products.
   - Implemented the `/api/product/:id` route to fetch a single product by ID.
   - Used `.populate()` to display only the category ID and name when fetching products.
   - Ensured that viewing products or a single product did not require authentication.

13. Products of a Single Category:
   - Implemented the `/api/product/category/:categoryId` route to fetch all products belonging to a single category.
   - Validated the existence of the category ID before retrieving products.
   - Used `.populate()` to display only the category ID and name when viewing products of a specific category.
   - The route is public and does not require authentication.

14. Cart Management:
   - Created the `cart.model.js` file to define the Mongoose schema for the cart.
   - Implemented cart-related operations in the `cart.controller.js` file, including adding products to the cart, viewing the cart, updating the quantity of a product in the cart, and removing items from the cart.
   - Configured the `cart.route.js` file to define routes for cart management.

15. Adding Products to Cart:
   - Implemented the `/api/cart/add` route to allow users to add products to their cart.
   - Checked if the product ID exists in the database before adding it to the cart.
   - Verified that only authenticated users can add products to their cart.

16. Viewing Cart:
   - Implemented the `/api/cart/view` route to enable users to view their cart.
   - Populated the product details (title and price) for each product in the cart to provide a better user experience.
   - Restricted cart viewing to authenticated users.

17. Updating Product Quantity in Cart:
   - Implemented the `/api/cart/update` route to allow users to increase the quantity of a product in their cart.
   - Checked if the product ID exists in the database and if the product is already present in the user's cart before updating the quantity.
   - Validated that only authenticated users can update the product quantity in their cart.

18. Removing Item from Cart:
   - Implemented the `/api/cart/remove/:productId` route to enable users to remove items from their cart based on the product ID.
   - Found the user's cart in the database and removed the item from the `products` array based on the provided product ID.
   - Ensured that only authenticated users can remove items from their cart.

19. Order Management:
   - Created the `order.model.js` file to define the Mongoose schema for orders, including user reference and product details in the order.
   - Implemented the `/api/order/create` route to allow users to create an order by placing products from their cart into the order.
   - Calculated the total price of the order based on the products in the cart and saved the order to the database.
   - Handled scenarios where the user attempts to create an order with an empty cart or an order with products that are no longer available.

20. Order History and Order Details:
   - Implemented the `/api/order/history` route to allow users to view their order history.
   - Created the `/api/order/details/:id` route to enable users to view the details of a specific order by its ID.
   - Fetched order history and order details from the database and returned them in the response.
   - Ensured that only authenticated users can access their order history and view order details.
